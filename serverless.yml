service: uploader-js

plugins:
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "dynamodb:*"
      Resource: "*"
    - Effect: Allow
      Action:
        - "s3:*"
      Resource: "arn:aws:s3:::uploader-private-files/*"

resources:
  Resources:
    UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: uploader-private-files
        CorsConfiguration:
          CorsRules:
          - AllowedMethods:
            - GET
            - PUT
            - POST
            - HEAD
            AllowedOrigins:
            - "*"
            AllowedHeaders:
            - "*"

functions:
  hello:
    handler: handlers.hello
  register:
    handler: handlers.register
    events:
      - http:
          path: register
          method: post
          cors: true
  unregister:
    handler: handlers.unregister
    events:
      - http:
          path: unregister
          method: post
          cors: true
  getAuthToken:
    handler: handlers.getAuthToken
    events:
      - http:
          path: getAuthToken
          method: post
          cors: true
  authorize:
    handler: handlers.authorize
  getVerifyToken:
    handler: handlers.getVerifyToken
    events:
      - http:
          path: getVerifyToken
          method: post
          cors: true
          authorizer: ${self:custom.authorizer.authorize}
  verify:
    handler: handlers.verify
    events:
      - http:
          path: verify
          method: post
          cors: true
          authorizer: ${self:custom.authorizer.authorize}
  removeAccount:
    handler: handlers.removeAccount
    events:
      - http:
          path: removeAccount
          method: post
          cors: true
          authorizer: ${self:custom.authorizer.authorize}
  listUploads:
    handler: handlers.listUploads
    events:
      - http:
          path: listUploads
          method: get
          cors: true
          authorizer: ${self:custom.authorizer.authorize}
  shareUpload:
    handler: handlers.shareUpload
    events:
      - http:
          path: shareUpload
          method: get
          cors: true
          authorizer: ${self:custom.authorizer.authorize}
          request:
            template:
              application/json: >
                {
                  "fileName" : "$input.params('fileName')",
                  "expiresAt": "$input.params('expiresAt')"
                }
  upload:
    handler: handlers.upload
    events:
      - http:
          path: upload
          method: post
          cors: true
          authorizer: ${self:custom.authorizer.authorize}
  getUpload:
    handler: handlers.getUpload
    events:
      - http:
          path: getUpload
          method: get
          cors: true
          authorizer: ${self:custom.authorizer.authorize}
  removeUpload:
    handler: handlers.removeUpload
    events:
      - http:
          path: removeUpload
          method: delete
          cors: true
          authorizer: ${self:custom.authorizer.authorize}

custom:
  authorizer:
    authorize:
      name: authorize
      type: TOKEN
      identitySource: method.request.header.Authorization
